using System;
using System.Linq;
using Grasshopper.Kernel;
using Grasshopper.Kernel.Parameters;
using ARDB = Autodesk.Revit.DB;

namespace RhinoInside.Revit.GH.Components.Walls
{
  using Convert.Geometry;

  [ComponentVersion(introduced: "1.0", updated: "1.12")]
  public class AnalyzeCurtainGrid : Component
  {
    public override Guid ComponentGuid => new Guid("D7B5C58E-8EDC-40C5-9BF8-078642090264");
    public override GH_Exposure Exposure => GH_Exposure.quarternary;
    protected override string IconTag => "DCG";

    public AnalyzeCurtainGrid() : base
    (
      name: "Deconstruct Curtain Grid",
      nickname: "D-Grid",
      description: "Deconstruct given curtain grid",
      category: "Revit",
      subCategory: "Architecture"
    )
    { }

    protected override void RegisterInputParams(GH_InputParamManager manager)
    {
      manager.AddParameter
      (
        param: new Parameters.CurtainGrid(),
        name: "Curtain Grid",
        nickname: "CG",
        description: "Curtain Grid",
        access: GH_ParamAccess.item
      );
    }

    protected override void RegisterOutputParams(GH_OutputParamManager manager)
    {
      // grid cells
      manager.AddParameter
      (
        param: new Parameters.CurtainCell(),
        name: "Cells",
        nickname: "C",
        description: "Grid cells generated by the given Curtain Grid",
        access: GH_ParamAccess.list
      );

      // grid parts
      manager.AddParameter
      (
        param: new Parameters.Mullion(),
        name: "Mullions",
        nickname: "M",
        description: "Grid mullion elements generated by the given Curtain Grid",
        access: GH_ParamAccess.list
      );

      manager.AddParameter
      (
        param: new Parameters.GraphicalElement(), // May be Panel, FamilyInstance or Wall
        name: "Panels",
        nickname: "P",
        description: "Grid panel elements generated by the given Curtain Grid",
        access: GH_ParamAccess.list
      );

      // grid lines
      // U
      manager.AddParameter
      (
        param: new Parameters.CurtainGridLine(),
        name: "Vertical Lines",
        nickname: "VL",
        description: "Grid line elements generated by the given Curtain Grid along the U axis",
        access: GH_ParamAccess.list
      );

      // U grid properties
      manager.AddParameter
      (
        new Param_Angle(),
        name: "Vertical Angle",
        nickname: "VA",
        description: "The angle for the U grid line pattern of the given curtain grid",
        access: GH_ParamAccess.item
      );

      manager.AddParameter
      (
        param: new Parameters.Param_Enum<Types.CurtainGridAlignType>(),
        name: "Vertical Justification",
        nickname: "VJ",
        description: "The alignment type for the U grid line pattern of the given curtain grid",
        access: GH_ParamAccess.item
      );

      manager.AddNumberParameter
      (
        name: "Vertical Offset",
        nickname: "VO",
        description: "The offset for the U grid line pattern of the given curtain grid",
        access: GH_ParamAccess.item
      );

      // V
      manager.AddParameter
      (
        param: new Parameters.CurtainGridLine(),
        name: "Horizontal Lines",
        nickname: "HL",
        description: "Grid line elements generated by the given Curtain Grid along the V axis",
        access: GH_ParamAccess.list
      );

      // V grid properties
      manager.AddParameter
      (
        new Param_Angle(),
        name: "Horizontal Angle",
        nickname: "HA",
        description: "The angle for the V grid line pattern of the given curtain grid",
        access: GH_ParamAccess.item
      );

      manager.AddParameter
      (
        param: new Parameters.Param_Enum<Types.CurtainGridAlignType>(),
        name: "Horizontal Justification",
        nickname: "HJ",
        description: "The alignment type for the V grid line pattern of the given curtain grid",
        access: GH_ParamAccess.item
      );

      manager.AddNumberParameter
      (
        name: "Horizontal Offset",
        nickname: "HO",
        description: "The offset for the V grid line pattern of the given curtain grid",
        access: GH_ParamAccess.item
      );
    }

    protected override void TrySolveInstance(IGH_DataAccess DA)
    {
      if (!Params.GetData(DA, "Curtain Grid", out Types.CurtainGrid grid, x => x.IsValid))
        return;

      if (grid.Value is ARDB.CurtainGrid cgrid)
      {
        DA.SetDataList("Cells", grid.CurtainCells);
        DA.SetDataList("Mullions", cgrid.GetMullionIds().Select(x => Types.Mullion.FromElementId(grid.Document, x)));
        DA.SetDataList("Panels", cgrid.GetPanelIds().Select(x => Types.GeometricElement.FromElementId(grid.Document, x)));

        // GetVGridLineIds returns grid lines perpendicular to V
        DA.SetDataList("Vertical Lines", grid.VGridLines);
        DA.SetData("Vertical Angle", Params.Output<Param_Angle>("Vertical Angle").UseDegrees ? Rhino.RhinoMath.ToDegrees(cgrid.Grid1Angle) : cgrid.Grid1Angle);
        DA.SetData("Vertical Justification", cgrid.Grid1Justification);
        DA.SetData("Vertical Offset", cgrid.Grid1Offset * GeometryDecoder.ModelScaleFactor);

        // GetUGridLineIds returns grid lines perpendicular to U
        DA.SetDataList("Horizontal Lines", grid.UGridLines);
        DA.SetData("Horizontal Angle", Params.Output<Param_Angle>("Horizontal Angle").UseDegrees ? Rhino.RhinoMath.ToDegrees(cgrid.Grid2Angle) : cgrid.Grid2Angle);
        DA.SetData("Horizontal Justification", cgrid.Grid2Justification);
        DA.SetData("Horizontal Offset", cgrid.Grid2Offset * GeometryDecoder.ModelScaleFactor);
      }
    }
  }
}
